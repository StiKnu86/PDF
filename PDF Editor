import { useState, useRef } from "react";
import { Document, Page, pdfjs } from "react-pdf";
import { Moon, Sun, Edit2, Save, ImagePlus, Lock, Link, FilePlus2, Scissors, PenLine } from "lucide-react";
import { PDFDocument, rgb, StandardFonts } from "pdf-lib";
import "react-pdf/dist/esm/Page/AnnotationLayer.css";

pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;

export default function STKPDF() {
  const [file, setFile] = useState(null);
  const [pdfData, setPdfData] = useState(null);
  const [numPages, setNumPages] = useState(null);
  const [darkMode, setDarkMode] = useState(false);
  const [editing, setEditing] = useState(false);
  const [newText, setNewText] = useState("");
  const [imageFile, setImageFile] = useState(null);
  const [passwordProtect, setPasswordProtect] = useState(false);
  const [password, setPassword] = useState("");
  const [mergeFiles, setMergeFiles] = useState([]);
  const imageInputRef = useRef(null);
  const mergeInputRef = useRef(null);

  function onDrop(event) {
    event.preventDefault();
    const droppedFile = event.dataTransfer.files[0];
    if (droppedFile && droppedFile.type === "application/pdf") {
      setFile(droppedFile);
      const reader = new FileReader();
      reader.onload = () => setPdfData(reader.result);
      reader.readAsArrayBuffer(droppedFile);
    }
  }

  function onDocumentLoadSuccess({ numPages }) {
    setNumPages(numPages);
  }

  async function handleSaveEdit() {
    const pdfDoc = await PDFDocument.load(pdfData);
    const pages = pdfDoc.getPages();
    const firstPage = pages[0];

    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);

    if (newText) {
      firstPage.drawText(newText, {
        x: 50,
        y: firstPage.getHeight() - 100,
        size: 18,
        font,
        color: rgb(0, 0, 0),
      });
    }

    if (imageFile) {
      const imgBytes = await imageFile.arrayBuffer();
      const img = await pdfDoc.embedPng(imgBytes);
      firstPage.drawImage(img, {
        x: 50,
        y: firstPage.getHeight() - 200,
        width: 100,
        height: 100,
      });
    }

    if (passwordProtect && password) {
      pdfDoc.encrypt({
        userPassword: password,
        ownerPassword: password,
        permissions: {
          printing: 'highResolution',
          modifying: false,
          copying: false,
          annotating: false,
          fillingForms: false,
          contentAccessibility: false,
          documentAssembly: false,
        },
      });
    }

    const editedPdfBytes = await pdfDoc.save();
    const blob = new Blob([editedPdfBytes], { type: "application/pdf" });
    setFile(blob);
    setPdfData(editedPdfBytes);
    setEditing(false);
    setImageFile(null);
    setNewText("");
    setPasswordProtect(false);
    setPassword("");
  }

  async function handleMergePDFs(e) {
    const files = Array.from(e.target.files);
    if (!files.length) return;

    const mergedPdf = await PDFDocument.create();

    for (const file of files) {
      const bytes = await file.arrayBuffer();
      const pdf = await PDFDocument.load(bytes);
      const copiedPages = await mergedPdf.copyPages(pdf, pdf.getPageIndices());
      copiedPages.forEach((page) => mergedPdf.addPage(page));
    }

    const mergedBytes = await mergedPdf.save();
    const blob = new Blob([mergedBytes], { type: "application/pdf" });
    setFile(blob);
    setPdfData(mergedBytes);
    setMergeFiles([]);
  }

  return (
    <div
      className={`min-h-screen p-6 transition-colors ${
        darkMode ? "bg-gray-900 text-white" : "bg-white text-black"
      }`}
      onDragOver={(e) => e.preventDefault()}
      onDrop={onDrop}
    >
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold">ðŸ“„ STK PDF</h1>
        <div className="flex gap-2">
          {file && (
            <>
              <button
                onClick={() => setEditing(!editing)}
                className="p-2 rounded-full border border-gray-400"
              >
                <Edit2 />
              </button>
              <button
                onClick={() => imageInputRef.current.click()}
                className="p-2 rounded-full border border-gray-400"
              >
                <ImagePlus />
              </button>
              <button
                onClick={() => setPasswordProtect(!passwordProtect)}
                className="p-2 rounded-full border border-gray-400"
              >
                <Lock />
              </button>
              <button className="p-2 rounded-full border border-gray-400">
                <Link />
              </button>
              <button
                onClick={() => mergeInputRef.current.click()}
                className="p-2 rounded-full border border-gray-400"
              >
                <FilePlus2 />
              </button>
              <button className="p-2 rounded-full border border-gray-400">
                <Scissors />
              </button>
              <button className="p-2 rounded-full border border-gray-400">
                <PenLine />
              </button>
              <input
                type="file"
                accept="image/*"
                hidden
                ref={imageInputRef}
                onChange={(e) => setImageFile(e.target.files[0])}
              />
              <input
                type="file"
                accept="application/pdf"
                multiple
                hidden
                ref={mergeInputRef}
                onChange={handleMergePDFs}
              />
            </>
          )}
          <button
            onClick={() => setDarkMode(!darkMode)}
            className="p-2 rounded-full border border-gray-400"
          >
            {darkMode ? <Sun /> : <Moon />}
          </button>
        </div>
      </div>

      {editing && (
        <div className="mb-4 space-y-2">
          <textarea
            value={newText}
            onChange={(e) => setNewText(e.target.value)}
            placeholder="Skriv ny tekst som skal legges til..."
            className="w-full p-2 border rounded-md text-black"
          />
          {passwordProtect && (
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Skriv inn passord for Ã¥ beskytte PDF..."
              className="w-full p-2 border rounded-md text-black"
            />
          )}
          <button
            onClick={handleSaveEdit}
            className="bg-blue-600 text-white px-4 py-2 rounded-md flex items-center gap-2"
          >
            <Save size={16} /> Lagre endringer
          </button>
        </div>
      )}

      {!file ? (
        <div className="border-4 border-dashed border-gray-400 rounded-xl p-12 text-center">
          <p className="text-lg">Dra og slipp en PDF her</p>
        </div>
      ) : (
        <Document
          file={file}
          onLoadSuccess={onDocumentLoadSuccess}
          className="flex flex-col items-center"
        >
          {Array.from(new Array(numPages), (el, index) => (
            <Page
              key={`page_${index + 1}`}
              pageNumber={index + 1}
              className="my-2 shadow-md"
            />
          ))}
        </Document>
      )}
    </div>
  );
}
